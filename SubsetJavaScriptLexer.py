# Generated from SubsetJavaScript.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,50,335,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,
        1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,12,
        1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,15,1,15,1,16,
        1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,159,8,17,
        1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,
        1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,
        1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,
        1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,
        1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,
        1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,32,1,32,1,32,1,33,
        1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,
        1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,
        1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,
        1,45,1,45,1,46,1,46,1,46,1,47,1,47,1,47,1,48,1,48,3,48,288,8,48,
        1,48,1,48,1,48,1,48,5,48,294,8,48,10,48,12,48,297,9,48,1,49,4,49,
        300,8,49,11,49,12,49,301,1,49,1,49,4,49,306,8,49,11,49,12,49,307,
        3,49,310,8,49,1,50,4,50,313,8,50,11,50,12,50,314,1,50,1,50,1,51,
        3,51,320,8,51,1,51,1,51,4,51,324,8,51,11,51,12,51,325,1,52,1,52,
        4,52,330,8,52,11,52,12,52,331,1,52,1,52,0,0,53,1,1,3,2,5,3,7,4,9,
        5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,0,31,0,33,
        0,35,15,37,16,39,17,41,18,43,19,45,20,47,21,49,22,51,23,53,24,55,
        25,57,26,59,27,61,28,63,29,65,30,67,31,69,32,71,33,73,34,75,35,77,
        36,79,37,81,38,83,39,85,40,87,41,89,42,91,43,93,44,95,45,97,46,99,
        47,101,48,103,49,105,50,1,0,6,1,0,97,122,1,0,65,90,1,0,48,57,2,0,
        44,44,46,46,2,0,9,9,32,32,2,0,34,34,39,39,345,0,1,1,0,0,0,0,3,1,
        0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,
        0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,
        0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,
        0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,
        0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,
        0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,
        0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,
        0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,
        0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,
        0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,1,107,1,0,0,0,3,109,
        1,0,0,0,5,111,1,0,0,0,7,113,1,0,0,0,9,115,1,0,0,0,11,117,1,0,0,0,
        13,119,1,0,0,0,15,121,1,0,0,0,17,123,1,0,0,0,19,125,1,0,0,0,21,127,
        1,0,0,0,23,129,1,0,0,0,25,131,1,0,0,0,27,138,1,0,0,0,29,143,1,0,
        0,0,31,145,1,0,0,0,33,147,1,0,0,0,35,158,1,0,0,0,37,160,1,0,0,0,
        39,169,1,0,0,0,41,176,1,0,0,0,43,182,1,0,0,0,45,186,1,0,0,0,47,190,
        1,0,0,0,49,196,1,0,0,0,51,200,1,0,0,0,53,203,1,0,0,0,55,208,1,0,
        0,0,57,216,1,0,0,0,59,221,1,0,0,0,61,225,1,0,0,0,63,232,1,0,0,0,
        65,234,1,0,0,0,67,237,1,0,0,0,69,239,1,0,0,0,71,242,1,0,0,0,73,245,
        1,0,0,0,75,248,1,0,0,0,77,256,1,0,0,0,79,260,1,0,0,0,81,266,1,0,
        0,0,83,268,1,0,0,0,85,270,1,0,0,0,87,272,1,0,0,0,89,274,1,0,0,0,
        91,276,1,0,0,0,93,279,1,0,0,0,95,282,1,0,0,0,97,287,1,0,0,0,99,299,
        1,0,0,0,101,312,1,0,0,0,103,323,1,0,0,0,105,327,1,0,0,0,107,108,
        5,59,0,0,108,2,1,0,0,0,109,110,5,40,0,0,110,4,1,0,0,0,111,112,5,
        41,0,0,112,6,1,0,0,0,113,114,5,123,0,0,114,8,1,0,0,0,115,116,5,125,
        0,0,116,10,1,0,0,0,117,118,5,63,0,0,118,12,1,0,0,0,119,120,5,58,
        0,0,120,14,1,0,0,0,121,122,5,61,0,0,122,16,1,0,0,0,123,124,5,44,
        0,0,124,18,1,0,0,0,125,126,5,91,0,0,126,20,1,0,0,0,127,128,5,93,
        0,0,128,22,1,0,0,0,129,130,5,46,0,0,130,24,1,0,0,0,131,132,5,99,
        0,0,132,133,5,111,0,0,133,134,5,110,0,0,134,135,5,99,0,0,135,136,
        5,97,0,0,136,137,5,116,0,0,137,26,1,0,0,0,138,139,5,46,0,0,139,140,
        5,108,0,0,140,141,5,111,0,0,141,142,5,103,0,0,142,28,1,0,0,0,143,
        144,7,0,0,0,144,30,1,0,0,0,145,146,7,1,0,0,146,32,1,0,0,0,147,148,
        7,2,0,0,148,34,1,0,0,0,149,150,5,116,0,0,150,151,5,114,0,0,151,152,
        5,117,0,0,152,159,5,101,0,0,153,154,5,102,0,0,154,155,5,97,0,0,155,
        156,5,108,0,0,156,157,5,115,0,0,157,159,5,101,0,0,158,149,1,0,0,
        0,158,153,1,0,0,0,159,36,1,0,0,0,160,161,5,102,0,0,161,162,5,117,
        0,0,162,163,5,110,0,0,163,164,5,99,0,0,164,165,5,116,0,0,165,166,
        5,105,0,0,166,167,5,111,0,0,167,168,5,110,0,0,168,38,1,0,0,0,169,
        170,5,114,0,0,170,171,5,101,0,0,171,172,5,116,0,0,172,173,5,117,
        0,0,173,174,5,114,0,0,174,175,5,110,0,0,175,40,1,0,0,0,176,177,5,
        119,0,0,177,178,5,104,0,0,178,179,5,105,0,0,179,180,5,108,0,0,180,
        181,5,101,0,0,181,42,1,0,0,0,182,183,5,102,0,0,183,184,5,111,0,0,
        184,185,5,114,0,0,185,44,1,0,0,0,186,187,5,118,0,0,187,188,5,97,
        0,0,188,189,5,114,0,0,189,46,1,0,0,0,190,191,5,99,0,0,191,192,5,
        111,0,0,192,193,5,110,0,0,193,194,5,115,0,0,194,195,5,116,0,0,195,
        48,1,0,0,0,196,197,5,108,0,0,197,198,5,101,0,0,198,199,5,116,0,0,
        199,50,1,0,0,0,200,201,5,105,0,0,201,202,5,102,0,0,202,52,1,0,0,
        0,203,204,5,101,0,0,204,205,5,108,0,0,205,206,5,115,0,0,206,207,
        5,101,0,0,207,54,1,0,0,0,208,209,5,101,0,0,209,210,5,108,0,0,210,
        211,5,115,0,0,211,212,5,101,0,0,212,213,5,32,0,0,213,214,5,105,0,
        0,214,215,5,102,0,0,215,56,1,0,0,0,216,217,5,112,0,0,217,218,5,117,
        0,0,218,219,5,115,0,0,219,220,5,104,0,0,220,58,1,0,0,0,221,222,5,
        112,0,0,222,223,5,111,0,0,223,224,5,112,0,0,224,60,1,0,0,0,225,226,
        5,108,0,0,226,227,5,101,0,0,227,228,5,110,0,0,228,229,5,103,0,0,
        229,230,5,116,0,0,230,231,5,104,0,0,231,62,1,0,0,0,232,233,5,60,
        0,0,233,64,1,0,0,0,234,235,5,60,0,0,235,236,5,61,0,0,236,66,1,0,
        0,0,237,238,5,62,0,0,238,68,1,0,0,0,239,240,5,62,0,0,240,241,5,61,
        0,0,241,70,1,0,0,0,242,243,5,61,0,0,243,244,5,61,0,0,244,72,1,0,
        0,0,245,246,5,33,0,0,246,247,5,61,0,0,247,74,1,0,0,0,248,249,5,99,
        0,0,249,250,5,111,0,0,250,251,5,110,0,0,251,252,5,115,0,0,252,253,
        5,111,0,0,253,254,5,108,0,0,254,255,5,101,0,0,255,76,1,0,0,0,256,
        257,5,108,0,0,257,258,5,111,0,0,258,259,5,103,0,0,259,78,1,0,0,0,
        260,261,5,98,0,0,261,262,5,114,0,0,262,263,5,101,0,0,263,264,5,97,
        0,0,264,265,5,107,0,0,265,80,1,0,0,0,266,267,5,43,0,0,267,82,1,0,
        0,0,268,269,5,45,0,0,269,84,1,0,0,0,270,271,5,42,0,0,271,86,1,0,
        0,0,272,273,5,47,0,0,273,88,1,0,0,0,274,275,5,37,0,0,275,90,1,0,
        0,0,276,277,5,42,0,0,277,278,5,42,0,0,278,92,1,0,0,0,279,280,5,43,
        0,0,280,281,5,43,0,0,281,94,1,0,0,0,282,283,5,45,0,0,283,284,5,45,
        0,0,284,96,1,0,0,0,285,288,3,29,14,0,286,288,3,31,15,0,287,285,1,
        0,0,0,287,286,1,0,0,0,288,295,1,0,0,0,289,294,3,29,14,0,290,294,
        3,31,15,0,291,294,3,33,16,0,292,294,5,95,0,0,293,289,1,0,0,0,293,
        290,1,0,0,0,293,291,1,0,0,0,293,292,1,0,0,0,294,297,1,0,0,0,295,
        293,1,0,0,0,295,296,1,0,0,0,296,98,1,0,0,0,297,295,1,0,0,0,298,300,
        3,33,16,0,299,298,1,0,0,0,300,301,1,0,0,0,301,299,1,0,0,0,301,302,
        1,0,0,0,302,309,1,0,0,0,303,305,7,3,0,0,304,306,3,33,16,0,305,304,
        1,0,0,0,306,307,1,0,0,0,307,305,1,0,0,0,307,308,1,0,0,0,308,310,
        1,0,0,0,309,303,1,0,0,0,309,310,1,0,0,0,310,100,1,0,0,0,311,313,
        7,4,0,0,312,311,1,0,0,0,313,314,1,0,0,0,314,312,1,0,0,0,314,315,
        1,0,0,0,315,316,1,0,0,0,316,317,6,50,0,0,317,102,1,0,0,0,318,320,
        5,13,0,0,319,318,1,0,0,0,319,320,1,0,0,0,320,321,1,0,0,0,321,324,
        5,10,0,0,322,324,5,13,0,0,323,319,1,0,0,0,323,322,1,0,0,0,324,325,
        1,0,0,0,325,323,1,0,0,0,325,326,1,0,0,0,326,104,1,0,0,0,327,329,
        7,5,0,0,328,330,8,5,0,0,329,328,1,0,0,0,330,331,1,0,0,0,331,329,
        1,0,0,0,331,332,1,0,0,0,332,333,1,0,0,0,333,334,7,5,0,0,334,106,
        1,0,0,0,13,0,158,287,293,295,301,307,309,314,319,323,325,331,1,6,
        0,0
    ]

class SubsetJavaScriptLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    BOOLEAN = 15
    FUNCTION = 16
    RETURN = 17
    WHILE = 18
    FOR = 19
    VAR = 20
    CONST = 21
    LET = 22
    IF = 23
    ELSE = 24
    ELSE_IF = 25
    PUSH = 26
    POP = 27
    LENGTH = 28
    LESS_THAN = 29
    LESS_THAN_EQUAL = 30
    GREATER_THAN = 31
    GREATER_THAN_EQUAL = 32
    EQUALS = 33
    NOT_EQUALS = 34
    CONSOLE = 35
    LOG = 36
    BREAK = 37
    ADD_OP = 38
    SUB_OP = 39
    MUL_OP = 40
    DIV_OP = 41
    MOD_OP = 42
    EXP_OP = 43
    UNARY_INCREMENT = 44
    UNARY_DECREMENT = 45
    VARIABLE = 46
    NUMBER = 47
    WHITESPACE = 48
    NEWLINE = 49
    TEXT = 50

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'('", "')'", "'{'", "'}'", "'?'", "':'", "'='", "','", 
            "'['", "']'", "'.'", "'concat'", "'.log'", "'function'", "'return'", 
            "'while'", "'for'", "'var'", "'const'", "'let'", "'if'", "'else'", 
            "'else if'", "'push'", "'pop'", "'length'", "'<'", "'<='", "'>'", 
            "'>='", "'=='", "'!='", "'console'", "'log'", "'break'", "'+'", 
            "'-'", "'*'", "'/'", "'%'", "'**'", "'++'", "'--'" ]

    symbolicNames = [ "<INVALID>",
            "BOOLEAN", "FUNCTION", "RETURN", "WHILE", "FOR", "VAR", "CONST", 
            "LET", "IF", "ELSE", "ELSE_IF", "PUSH", "POP", "LENGTH", "LESS_THAN", 
            "LESS_THAN_EQUAL", "GREATER_THAN", "GREATER_THAN_EQUAL", "EQUALS", 
            "NOT_EQUALS", "CONSOLE", "LOG", "BREAK", "ADD_OP", "SUB_OP", 
            "MUL_OP", "DIV_OP", "MOD_OP", "EXP_OP", "UNARY_INCREMENT", "UNARY_DECREMENT", 
            "VARIABLE", "NUMBER", "WHITESPACE", "NEWLINE", "TEXT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "LOWERCASE", "UPPERCASE", "DIGIT", "BOOLEAN", "FUNCTION", 
                  "RETURN", "WHILE", "FOR", "VAR", "CONST", "LET", "IF", 
                  "ELSE", "ELSE_IF", "PUSH", "POP", "LENGTH", "LESS_THAN", 
                  "LESS_THAN_EQUAL", "GREATER_THAN", "GREATER_THAN_EQUAL", 
                  "EQUALS", "NOT_EQUALS", "CONSOLE", "LOG", "BREAK", "ADD_OP", 
                  "SUB_OP", "MUL_OP", "DIV_OP", "MOD_OP", "EXP_OP", "UNARY_INCREMENT", 
                  "UNARY_DECREMENT", "VARIABLE", "NUMBER", "WHITESPACE", 
                  "NEWLINE", "TEXT" ]

    grammarFileName = "SubsetJavaScript.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


